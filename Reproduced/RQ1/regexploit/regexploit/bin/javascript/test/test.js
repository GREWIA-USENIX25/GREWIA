const assert = require('better-assert');
const cli = require('../cli');
const findRegex = require('../find');

describe('findRegex', function() {
  describe('extractRegexesFromSource()', function() {
    it('should be able to return nothing', function() {
      assert([...findRegex.extractRegexesFromSource('abc')].length == 0);
    });
    it('should find a literal regex', function() {
      let found = [...findRegex.extractRegexesFromSource('const a = /ab+c/g')];
      assert(found.length == 1);
      assert(found[0].pattern == 'ab+c');
      assert(found[0].flags == 'g');
      assert(found[0].lineno == 1);
    });
    it('should find the RegExp constructor', function() {
      let found = [...findRegex.extractRegexesFromSource('const a = [\nnew RegExp("one"),\nRegExp("two", "flags")]')];
      assert(found.length == 2);
      assert(found[0].pattern == 'one');
      assert(found[0].flags == '');
      assert(found[0].lineno == 2);
      assert(found[1].pattern == 'two');
      assert(found[1].flags == 'flags');
      assert(found[1].lineno == 3);
    });
    var burriedTests = [
      "var a = {b: /abc/}",
      "function x() { return function* () { yield /abc/ } }",
      "function x(y = /abc/) { return y; }",
      "a ? /abc/ : null",
      "if(/abc/){}", // a bit stupid
      "[12, abc, /abc/, ...ghi]",
      "for (const a of x.match(/abc/)) {}"
    ]
    burriedTests.forEach(function (code) {
      it('should find burried regex ' + code, function() {
        let found = [...findRegex.extractRegexesFromSource(code)];
        assert(found.length == 1);
        assert(found[0].pattern == 'abc');
        assert(found[0].flags == '');
      });
    });
  });
});

describe("cli", function() {
  describe("parseCode()", function() {
    it('should find a literal regex', function() {
      let found = [...cli.parseCode('/a(((b)+c))/im', 'fname')];
      assert(found.length == 1);
      const output = JSON.parse(found[0]);
      assert(output.pattern == 'a(((b)+c))');
      assert(output.flags == 'im');
      assert(output.lineno == '1');
      assert(output.filename == 'fname');
      assert(!output.error);
    });
    it('should return errors if necessary', function() {
      let found = [...cli.parseCode('/!#~')];
      assert(found.length == 1);
      assert(JSON.parse(found[0]).error);
      assert(!JSON.parse(found[0]).pattern);
    });
  });
});
